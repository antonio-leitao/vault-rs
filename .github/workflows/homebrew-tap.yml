name: Update Homebrew Tap

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v0.1.0
  workflow_dispatch: # Allows manual triggering

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: creds
  HOMEBREW_TAP_REPO: antonio-leitao/homebrew-taps

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Update Homebrew Tap
    strategy:
      matrix:
        include:
          # macOS Intel
          - os: macos-13 # Using macos-13 for Intel for clarity
            target: x86_64-apple-darwin
            asset_name: creds-x86_64-apple-darwin
          # macOS Apple Silicon (ARM64)
          - os: macos-14 # <-- CHANGE: Use a native ARM64 runner for Apple Silicon
            target: aarch64-apple-darwin
            asset_name: creds-aarch64-apple-darwin
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: creds-x86_64-linux

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }} --package ${{ env.PROJECT_NAME }}

      - name: Create tarball
        run: |
          # Create a staging directory
          mkdir -p staging
          
          # Copy binary into staging dir
          cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} staging/

          # Copy README and LICENSE if they exist
          [ -f README.md ] && cp README.md staging/
          [ -f LICENSE ] && cp LICENSE staging/
          
          # Create completions directory if it exists and copy files
          if [ -d "completions" ]; then
            cp -r completions staging/
          fi

          # Create the tarball from the staging directory
          tar -czf ${{ matrix.asset_name }}.tar.gz -C staging .

          # Calculate SHA256
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
          
          # Expose SHA256 to other steps
          echo "SHA256=$(cat ${{ matrix.asset_name }}.tar.gz.sha256 | awk '{print $1}')" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.tar.gz.sha256

  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          # <-- CHANGE: Simplified file globbing
          files: artifacts/*/*.tar.gz
          body: |
            # Creds ${{ github.ref_name }}

            Secure, Git-backed credential manager with strong encryption.

            ## Installation

            ### Homebrew (macOS/Linux)
            ```bash
            brew install ${{ env.HOMEBREW_TAP_REPO }}/creds
            ```

            ### Direct Download
            Download the appropriate binary for your system from the assets below.

            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare formula variables
        id: formula_vars
        run: |
          SHA_DARWIN_X86=$(cat artifacts/creds-x86_64-apple-darwin/*.sha256 | awk '{print $1}')
          SHA_DARWIN_ARM=$(cat artifacts/creds-aarch64-apple-darwin/*.sha256 | awk '{print $1}')
          SHA_LINUX_X86=$(cat artifacts/creds-x86_64-linux/*.sha256 | awk '{print $1}')

          echo "sha_darwin_x86=$SHA_DARWIN_X86" >> $GITHUB_OUTPUT
          echo "sha_darwin_arm=$SHA_DARWIN_ARM" >> $GITHUB_OUTPUT
          echo "sha_linux_x86=$SHA_LINUX_X86" >> $GITHUB_OUTPUT

      - name: Generate Homebrew Formula
        id: generate_formula
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          SHA_DARWIN_X86="${{ steps.formula_vars.outputs.sha_darwin_x86 }}"
          SHA_DARWIN_ARM="${{ steps.formula_vars.outputs.sha_darwin_arm }}"
          SHA_LINUX_X86="${{ steps.formula_vars.outputs.sha_linux_x86 }}"
          
          # Using a heredoc to create the formula file
          cat > creds.rb << EOF
          class Creds < Formula
            desc "Secure, Git-backed credential manager with strong encryption"
            homepage "https://github.com/${{ github.repository }}"
            version "${VERSION}"
            license "MIT"

            on_macos do
              if Hardware::CPU.intel?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-x86_64-apple-darwin.tar.gz"
                sha256 "${SHA_DARWIN_X86}"
              elsif Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-aarch64-apple-darwin.tar.gz"
                sha256 "${SHA_DARWIN_ARM}"
              end
            end

            on_linux do
              if Hardware::CPU.intel?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-x86_64-linux.tar.gz"
                sha256 "${SHA_LINUX_X86}"
              end
            end

            def install
              bin.install "creds"
              
              # Install shell completions
              bash_completion.install "completions/creds.bash" if File.exist? "completions/creds.bash"
              zsh_completion.install "completions/_creds" if File.exist? "completions/_creds"
              fish_completion.install "completions/creds.fish" if File.exist? "completions/creds.fish"
            end

            test do
              system "#{bin}/creds", "--version"
              assert_match "A secure, Git-backed secret manager", shell_output("#{bin}/creds --help")
            end
          end
          EOF

      - name: Commit formula to Homebrew tap
        uses: peter-evans/create-pull-request@v6
        with:
          # Use a token with write permissions to the tap repository
          token: ${{ secrets.WASM_DEPLOY_TOKEN }}
          repository: ${{ env.HOMEBREW_TAP_REPO }}
          path: homebrew-taps
          commit-message: "chore: Update creds formula to v${{ needs.create-release.outputs.version }}"
          title: "Update creds formula to v${{ needs.create-release.outputs.version }}"
          body: "Automated update of the \`creds\` formula to version \`${{ needs.create-release.outputs.version }}\`."
          branch: "update-creds-v${{ needs.create-release.outputs.version }}"
          base: main # Or your tap's default branch
          add-paths: |
            Formula/creds.rb
          # Custom author and committer details
          author: GitHub Actions <41898282+github-actions[bot]@users.noreply.github.com>
          committer: GitHub Actions <41898282+github-actions[bot]@users.noreply.github.com>
          # This step will create the creds.rb file in the cloned tap repository
          # It uses the output from the previous step
          signoff: true
          # A little script to move the file to the correct location
          script: |
            mkdir -p ${{ env.HOMEBREW_TAP_REPO }}/Formula
            mv creds.rb ${{ env.HOMEBREW_TAP_REPO }}/Formula/creds.rb
