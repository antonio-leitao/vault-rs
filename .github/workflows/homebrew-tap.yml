name: Update Homebrew Tap

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v0.1.0, v1.0.0, etc.
  workflow_dispatch: # Allows manual triggering

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: creds
  # Update this to match your tap repository name
  HOMEBREW_TAP_REPO: antonio-leitao/homebrew-taps

jobs:
  build-and-release:
    name: Build and Update Homebrew Tap
    strategy:
      matrix:
        include:
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: creds-x86_64-apple-darwin
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: creds-aarch64-apple-darwin
          # Linux x86_64 (for Linux support via Homebrew)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: creds-x86_64-linux

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Release Binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package creds

      - name: Create tarball
        run: |
          # Create a directory for the archive
          mkdir -p dist/${{ env.PROJECT_NAME }}

          # Copy binary
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} dist/${{ env.PROJECT_NAME }}/
          else
            cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} dist/${{ env.PROJECT_NAME }}/
          fi

          # Copy README and LICENSE if they exist
          [ -f README.md ] && cp README.md dist/${{ env.PROJECT_NAME }}/
          [ -f LICENSE ] && cp LICENSE dist/${{ env.PROJECT_NAME }}/

          # Create tarball
          cd dist
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ env.PROJECT_NAME }}

          # Calculate SHA256
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
          fi

          echo "SHA256=$(cat ${{ matrix.asset_name }}.tar.gz.sha256 | awk '{print $1}')" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: |
            dist/${{ matrix.asset_name }}.tar.gz
            dist/${{ matrix.asset_name }}.tar.gz.sha256

  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            # Creds ${{ github.ref_name }}

            Secure, Git-backed credential manager with strong encryption.

            ## Installation

            ### Homebrew (macOS/Linux)
            ```bash
            brew install antonio-leitao/taps/creds
            ```

            ### Direct Download
            Download the appropriate binary for your system from the assets below.

            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

  upload-assets:
    name: Upload Release Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            asset_name: creds-x86_64-apple-darwin
          - target: aarch64-apple-darwin
            asset_name: creds-aarch64-apple-darwin
          - target: x86_64-unknown-linux-gnu
            asset_name: creds-x86_64-linux

    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ./dist

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: [create-release, upload-assets]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Calculate SHA256 checksums
        id: checksums
        run: |
          # Get SHA256 for each platform
          SHA_DARWIN_X86=$(cat artifacts/creds-x86_64-apple-darwin/creds-x86_64-apple-darwin.tar.gz.sha256 | awk '{print $1}')
          SHA_DARWIN_ARM=$(cat artifacts/creds-aarch64-apple-darwin/creds-aarch64-apple-darwin.tar.gz.sha256 | awk '{print $1}')
          SHA_LINUX_X86=$(cat artifacts/creds-x86_64-linux/creds-x86_64-linux.tar.gz.sha256 | awk '{print $1}')

          echo "sha_darwin_x86=$SHA_DARWIN_X86" >> $GITHUB_OUTPUT
          echo "sha_darwin_arm=$SHA_DARWIN_ARM" >> $GITHUB_OUTPUT
          echo "sha_linux_x86=$SHA_LINUX_X86" >> $GITHUB_OUTPUT

          # Debug output
          echo "macOS Intel SHA256: $SHA_DARWIN_X86"
          echo "macOS ARM SHA256: $SHA_DARWIN_ARM"
          echo "Linux x86_64 SHA256: $SHA_LINUX_X86"

      - name: Generate Homebrew Formula
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          SHA_DARWIN_X86=${{ steps.checksums.outputs.sha_darwin_x86 }}
          SHA_DARWIN_ARM=${{ steps.checksums.outputs.sha_darwin_arm }}
          SHA_LINUX_X86=${{ steps.checksums.outputs.sha_linux_x86 }}

          cat > creds.rb << EOF
          class Creds < Formula
            desc "Secure, Git-backed credential manager with strong encryption"
            homepage "https://github.com/${{ github.repository }}"
            version "${VERSION}"
            license "MIT"

            on_macos do
              if Hardware::CPU.intel?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-x86_64-apple-darwin.tar.gz"
                sha256 "${SHA_DARWIN_X86}"
              elsif Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-aarch64-apple-darwin.tar.gz"
                sha256 "${SHA_DARWIN_ARM}"
              end
            end

            on_linux do
              if Hardware::CPU.intel?
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/creds-x86_64-linux.tar.gz"
                sha256 "${SHA_LINUX_X86}"
              end
            end

            depends_on "git"

            def install
              bin.install "creds"
              
              # Install shell completions if they exist
              if File.exist?("completions/creds.bash")
                bash_completion.install "completions/creds.bash"
              end
              
              if File.exist?("completions/creds.zsh")
                zsh_completion.install "completions/_creds"
              end
              
              if File.exist?("completions/creds.fish")
                fish_completion.install "completions/creds.fish"
              end
            end

            test do
              # Test that the binary runs
              system "#{bin}/creds", "--version"
              
              # Test help command
              assert_match "A secure, Git-backed secret manager", shell_output("#{bin}/creds --help")
            end
          end
          EOF

          echo "Generated Homebrew formula:"
          cat creds.rb

      - name: Checkout Homebrew Taps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HOMEBREW_TAP_REPO }}
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-taps

      - name: Update Formula in Taps Repository
        run: |
          # Copy the formula to the Formula directory
          mkdir -p homebrew-taps/Formula
          cp creds.rb homebrew-taps/Formula/

          cd homebrew-taps

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Commit and push
          git add Formula/creds.rb
          git commit -m "Update creds to version ${{ needs.create-release.outputs.version }}" || echo "No changes to commit"
          git push

      - name: Test Installation Instructions
        run: |
          echo "ðŸŽ‰ Homebrew tap updated successfully!"
          echo ""
          echo "Users can now install creds with:"
          echo "  brew tap ${{ env.HOMEBREW_TAP_REPO }}"
          echo "  brew install creds"
          echo ""
          echo "Or in one command:"
          echo "  brew install ${{ env.HOMEBREW_TAP_REPO }}/creds"
